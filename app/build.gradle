plugins {
    id 'onhand.android.application.compose'
}

android {
    namespace 'com.tstreet.onhand'

    defaultConfig {
        applicationId "com.tstreet.onhand"
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix ".debug"
        }
        mockDebug {
            initWith(debug)
            matchingFallbacks = ['debug']
            applicationIdSuffix ".mock"
        }
        release {
            applicationIdSuffix ".release"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation project(path: ':feature:home')
    implementation project(path: ':feature:recipesearch')
    implementation project(path: ':feature:recipedetail')
    implementation project(path: ':feature:shoppinglist')
    implementation project(path: ':feature:savedrecipes')

    // Core modules we want to be retained for entire Application lifecycle
    implementation project(path: ':core:data:api')
    implementation project(path: ':core:common')
    implementation project(path: ':core:ui')

    // On implementation vs. api:
    // If you are a library maintainer you should use 'api' for every dependency which is needed for
    // the public API of your library, while 'implementation' should be used for all dependencies
    // which must not be used by the end consumers. 'api' effectively leaks the internal
    // 'implementation' of dependencies, 'implementation' does not. 'implementation' does not force
    // a recompilation of the dependency because we are indicating it is not 'within our control'.
    //
    // Think of 'api' dependency as public (seen by other modules) while 'implementation' dependency
    // as private (only seen by this module).
    implementation libs.androidx.core.ktx
    implementation libs.androidx.activity.compose
    implementation libs.androidx.compose.ui
    implementation libs.androidx.compose.material3
    implementation libs.androidx.navigation.compose
    implementation libs.dagger
    kapt libs.dagger.compiler

    testImplementation libs.junit4
    androidTestImplementation libs.androidx.test.ext
    androidTestImplementation libs.androidx.test.espresso.core
    androidTestImplementation libs.androidx.compose.ui.test
}